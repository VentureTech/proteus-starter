import org.ajoberstar.grgit.Grgit

sourceSets {
    main {
        java {
            srcDirs += 'src/main/kotlin'
        }
    }
}


if(compileLibraries) {
    println 'Compiling Libraries Is Enabled'
    sourceSets {
        libraries {
            java { srcDirs = []}
            resources { srcDirs = []}
        }
    }
}

compileKotlin {
    kotlinOptions {
        apiVersion = "1.2"
        languageVersion = "1.2"
        javaParameters = true
        jvmTarget = "1.8"
    }
}

compileJava {
    options.encoding = 'UTF-8'
    options.compilerArgs << '-Xlint:all,-deprecation,-processing'
    options.compilerArgs << '-parameters'
    options.incremental = true
}
compileTestJava { options.incremental = true }


configurations {
    runtimeaspects { transitive = false }
    compiletimeaspects { transitive = false }
    if(compileLibraries) {
        librariesCompile.extendsFrom compile
        librariesRuntime.extendsFrom runtime
    }
}
dependencies {

    if(compileLibraries) {
        librariesCompile sourceSets.main.output
    }

    compile('com.google.apis:google-api-services-urlshortener:v1-rev43-1.21.0'){
        exclude group:'com.google.code.findbugs', module: 'jsr305'
        exclude group:'com.google.http-client', module: 'google-http-client-jackson2'
        exclude group:'com.google.guava', module: 'guava-jdk5'
    }
    compile 'com.google.http-client:google-http-client-gson:1.21.0'

    compile 'org.apache.httpcomponents:fluent-hc:4.2.6'
    compile 'org.hibernate:hibernate-envers:4.3.11.Final'
    compile 'org.mnode.ical4j:ical4j:1.0.7'
    compile 'org.mnode.ical4j:ical4j-extensions:0.9.2'

    runtimeaspects "org.springframework:spring-instrument:${version_spring}", "org.aspectj:aspectjweaver:${aspectjVersion}"
    compiletimeaspects "org.springframework:spring-aspects:${version_spring}", "org.aspectj:aspectjtools:${aspectjVersion}"

    // App dependencies
    compile "net.proteusframework:proteusframework-core:${version_proteus}"
    //compile "net.proteusframework:proteusframework-testing:${version_proteus}"
    compile "net.proteusframework:proteusframework-data:${version_proteus}"
    compile "net.proteusframework:proteusframework-internet:${version_proteus}"
    compile "net.proteusframework:proteusframework-ui:${version_proteus}"
    compile "net.proteusframework:proteusframework-users:${version_proteus}"
    compile "net.proteusframework:proteusframework-cms:${version_proteus}"
    compile "net.proteusframework:proteusframework-communication:${version_proteus}"
    compile "net.proteusframework:proteusframework-processes:${version_proteus}"
    compile "net.proteusframework:proteusframework-management:${version_proteus}"
    compile "net.proteusframework:proteusframework:${version_proteus}"

    // Most apps use spring.
    compile "org.springframework:spring-core:${version_spring}",
        "org.springframework:spring-beans:${version_spring}",
        "org.springframework:spring-jdbc:${version_spring}",
        "org.springframework:spring-aop:${version_spring}",
        "org.springframework:spring-context:${version_spring}",
        "org.springframework:spring-orm:${version_spring}",
        "org.springframework:spring-web:${version_spring}",
        "org.springframework:spring-test:${version_spring}",
        "org.springframework:spring-instrument:${version_spring}",
        "org.springframework:spring-aspects:${version_spring}"

    kapt "net.proteusframework:proteusframework-core:${version_proteus}"
    //    kapt FIXME : add the jpa metamodel generator here
    compile "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"
    compile "org.jetbrains.kotlin:kotlin-stdlib-jre8:$kotlin_version"
    compile "org.jetbrains.kotlin:kotlin-reflect:$kotlin_version"
    compile "org.jetbrains.exposed:exposed:0.7.+"

    testCompile "net.proteusframework:proteusframework-core:${version_proteus}"
    testCompile "net.proteusframework:proteusframework-testing:${version_proteus}"
    testCompile 'org.testng:testng:6.8.13'
    testCompile 'junit:junit:4.11'
    testCompile('org.uncommons:reportng:1.1.2') {
        exclude group: "org.testng", module: "testng"
    }
    testCompile 'org.apache.derby:derby:10.12.1.1'
    testRuntime 'com.google.inject:guice:4.0'
    testCompile 'org.jetbrains.spek:spek-api:1.0.89'
    testRuntime 'org.jetbrains.spek:spek-junit-platform-engine:1.0.89'

    // These are for the war plugin
    if(warTaskSpecified)
    {
        providedCompile('javax.servlet:javax.servlet-api:3.0+'){ transitive = false }
        providedCompile('javax.servlet.jsp:jsp-api:2.2'){ transitive = false }
        //providedCompile('org.eclipse.jetty.orbit:org.apache.jasper.glassfish:2.2+')
        providedCompile('org.eclipse.jetty:jetty-jsp:8+')
    }
}


def canBeResolved(configuration){
    configuration.metaClass.respondsTo(configuration, "isCanBeResolved") ?
        configuration.isCanBeResolved() : true
}
task createDependencyFile() {
    group = 'Build'
    doFirst {
        def dependencyFile = file("dependencies.txt")
        def pw = dependencyFile.newPrintWriter()
        configurations.all.collect {
            if(canBeResolved(it)) it.resolvedConfiguration.getResolvedArtifacts()
            else []
        }.flatten().collect {it.moduleVersion.id}.unique().sort(false){"${it.group}:${it.name}"}forEach{pw.println(it)}
        pw.close()
        try{
            def root = file('../.git').exists() ? file('..') : file('.')
            def grgit = Grgit.open(root)
            def path = root == project.rootDir ? dependencyFile.name : "${project.rootDir.name}/${dependencyFile.name}"
            if(isIDEA)
                grgit.add(patterns: [path] as Set, update: false)
            else
                grgit.commit(message: 'Updating dependencies.txt', paths: [path] as Set)

        }catch(ignore){
            if(!ignore.message.toLowerCase().contains("no changes"))
                ignore.printStackTrace()
        }
    }
}
if(isIDEA) {
    afterEvaluate {
        createDependencyFile.execute()
    }
}